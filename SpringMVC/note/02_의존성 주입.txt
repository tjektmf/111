02_의존성 주입.txt


# 의존성

	- 하나의 클래스를 실행하기 위해 필요한 다른 클래스
	- 자바에서는 의존 관계를 구현하기 위해 생성자를 사용한다
	- 생성자를 사용하는 경우 유지보수 비용이 많이 발생한다
	
# 의존성 주입

	- 선언만 해놓으면 알아서 해당 클래스의 인스턴스를 채워주는 방식
	- 의존성을 외부에서 주입하여 객체간의 결합도를 낮출 수 있다
	- 스프링에서 의존성 주입을 활용하기 위해서는 반드시 기본 생성자가 구현되어 있어야 한다

# Java Bean Object (자바빈 객체)

	- 데이터 클래스를 만들 때 계속해서 사용하던 방식
	- 필드값(속성)의 접근 제어자는 private이어야 한다 
	<< 접근제어자 private하고 세터를 사용해 수정하고 게터를 사용해 활용함 직접적인 수정 및 사용 불가
	- 각 필드에 대한 접근은 Getter/Setter를 활용해야 한다
	- 기본 생성자가 반드시 존재해야 한다
	- 자바빈 스타일 객체는 다양한 프레임워크, API의 표준이기 때문에 반드시 지키는 것이 좋다
	
# 스프링의 의존성 주입

	- 컨텍스트에 객체를 등록해놓는다 (root-context)
	- 스프링이 컨텍스트에 등록된 객체로 인스턴스를 미리 만들어 놓는다 (싱글톤)
	- 만들어진 인스턴스를 대입할만한 변수가 있다면 해당 인스턴스를 제공한다
	
# 의존성 주입을 위한 어노테이션

	@Component : 컨텍스트에 컴포넌트 스캔을 통해 수거해 갈 수 있는 대상이 된다
	@Controller : MVC 패턴에서 컨트롤러 역할을 수행하는 컴포넌트들을 표시하는 어노테이션
	@Repository : MVC 패턴에서 모델 역할을 수행하는 컴포넌트들을 표시하는 어노테이션
	@Service : MVC 패턴에서 비즈니스 로직 역할을 수행하는 컴포넌트들을 표시하는 어노테이션
	@Autowired : 컨텍스트에 등록된 컴포넌트 중에 알맞은 것을 요청하는 어노테이션
	
	- 생성자를 사용하지 않고 스프링이 대신 인스턴스를 생성하여 주입해주기 때문에 
	  클래스간 결합도가 낮아져 유지보수가 쉬워짐
	  
# 컨텍스트에 빈(bean) 등록하기

	- <context:component-scan>을 통해 컴포넌트들을 컨텍스트에 등록할 수 있다
	- <beans:bean>으로 스캔을 통하지 않고 클래스를 컨텍스트에 직접 등록할 수도 있다
	- 컨텍스트에 등록된 자바 객체를 빈이라고 부른다
	- 컨텍스트에 등록한 자바 객체들은 기본적으로 싱글톤 디자인 패턴을 사용해 등록된다
	- <bean class="commons.Calculator"></bean> root-context.xml 에 이렇게 등록함
	
# 싱글톤 (Singleton)

	- 애플리케이션 내에서 단 하나의 인스턴스만 가지고 있다는 것을 보장해주는 디자인 패턴