07_컨트롤러.txt

# MVC 디자인 패턴

	- 프로그램을 효율적으로 개발하기 위해 코드를 3가지 종류로 구분하여 개발을 진행하고자 하는 디자인 패턴
	- 프로그램의 처리 로직과 화면 구현 로직을 구분하는데에 초점을 맞춘 디자인 패턴
	- Model, View, Controller -> MVC
	- Model : 데이터의 형태를 표현하기 위한 용도의 코드
	- View : 사용자에게 보여지는 부분을 구현하기 위한 용도의 코드(JSP, HTML, CSS, JS, ...)
	- Controller : 사용자에게 보여지기 전 다양한 처리를 담당하는 용도의 코드
	(요청을 받았을 때 어떤 처리를 해야하는지, DB 접근, 처리 후 어떤 뷰로 가는지 등)
	
@Controller

	- 해당 클래스가 MVC 디자인 패턴 중 Controller에 해당하는 컴포넌트임을 표시하는 어노테이션
	- 컴포넌트이기 때문에 컨텍스트의 자동 수거 대상임
	- URI + Request Method를 통해 어떤 처리를 수행하고 어떤 뷰로 가야하는지를 정의하는 장소
	
# 컨트롤러에서 매개변수로 넘겨 받을 수 있는 타입들

	1. HttpServletRequest
	
		- JSP에서 사용하던 객체1
		
	2. HttpServletResponse
	
		- JSP에서 사용하던 객체2
		
	3. Java bean 형태의 모델 객체를 컨트롤러의 매개변수로 활용하는 경우
	
		- 요청에 파라미터 값이 실려오는 경우 매개변수에 있는 자바빈 형태의 객체 내부에 자동으로 바인딩 해줌
		
		- 이 때 파라미터의 name과 모델 객체의 속성 이름이 일치해야 바인딩이 이루어지므로 이름에 주의
		 클래스 이름 첫글자만 소문자로 바꿔서 적용됨 전부 소문자로 적용되는건 아님
		
		- 모델 객체의 속성에 Setter가 존재하지 않으면 바인딩이 일어나지 않음, 롬복을 사용해 세터 생성
		
		- 만약 해당 객체에 파라미터 바인딩이 성공한 경우 자동으로 attribute에 추가되어 view에서 사용할 수 있다
		
	4. 전달받는 파라미터 이름과 같은 이름의 변수를 매개변수에 활용하는 경우
	
		- 파라미터 이름과 매개변수 이름이 일치하는 경우에도 바인딩이 발생
		
		- 모델 객체에 바인딩하는 경우와는 다르게 어트리뷰트에 자동으로 실어주지는 않음
		
		- 파라미터 이름과 매개변수 이름을 다르게 바인딩하고 싶은 경우 @ModelAttribute() 어노테이션으로 강제바인딩
		
	5. HttpSession
	
		- 세션 객체를 꺼낼 수 있다
		
	6. Model
	
		- 어트리뷰트를 실어서 뷰로 전달할 수 있는 객체
		- request의 기능 중 어트리뷰트를 싣는 역할을 하는 객체
		- setAttribute 대신 addAttribute 메서드를 사용함
		
	7. @CookieValue
	
		- 쿠키 값을 편리하게 꺼낼 수 있는 어노테이션
		
# Controller Method's Return Type

	1. 다음 view 페이지를 찾는 타입
	
		- String : 리턴하는 문자열의 앞에는 /WEB-INF/views/를 붙이고
				리턴하는 문자열의 뒤에는 .jsp를 붙여 다음 view 페이지로 포워드한다
				리턴하는 문자열이 redirect: 로 시작하면 해당 경로로 리다이렉트한다
		
		- void : Controller로 접속하기 위해 사용했던 URI를 그대로 사용하여 다음 view를 찾음
				URI 경로와 /WEB-INF/views/ 이하 경로가 완전히 일치하는 경우 사용할 수 있다
		
		- ModelAndView : 모델과 뷰를 한번에 설정할 수 있는 객체(Model + String)
		
	2. 다음 view 페이지를 찾지 않는 타입(view 대신 data만 응답하는 경우)
	
		- Java bean 객체 타입으로 리턴 : 자바빈 객체에 들어있는 데이터를 응답한다
		
		- ResponseEntity 객체로 리턴 : 내가 원하는 응답을 커스텀하여 응답한다
		
# POST 방식 파라미터의 한글이 깨질 때 사용하는 필터

	복붙으로 활용함

	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<!-- 바로 위에 appServlet이 url-pattern / 에 연결되어 있기 때문에 appServlet으로 연결해주면 됨 -->
		<servlet-name>appServlet</servlet-name>
	</filter-mapping>
	
	