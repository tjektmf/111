01_REST.txt

# REST

	- URI 로 어떤 자원인지 식별하고 request method로 해당 자원에 대한 CRUD를 구분하여 데이터만 응답하는 방식

	- HTML 코드가 아닌 데이터만 응답하기 때문에 웹 브라우저가 아닌 다른 프로그램에서도 해당 서버를 활용할 수 있다는 장점이 있다
	
	- Create, Insert (POST)
		ex) POST:/employee (새 사원을 추가)
	
	- Read, Select (GET)
		ex) GET:/employee/130 (130번 사원을 조회)
	
	- Update (PUT)
		ex) PUT:/employee/130 (130번 사원의 정보를 수정)
		
	- Delete (DELETE)
		ex) DELETE:/employee/130 (130번 사원의 정보를 삭제)
		
	대충 이렇게 쓰자는 개발자간 약속이 있음 
	DELETE:/employee/130 대충 이 코드를 보면 130번 임플로이를 삭제하겠다는 내용이겠거니
	라는 생각을 하게되고 또한 실제로 그렇게 작동이 될 것이라는 생각
		
# Spring REST

	- @RestController : 해당 클래스가 RestController임을 표시
	- @ResponseBody : 일반 컨트롤러 내부의 해당 메서드가 뷰 페이지 대신 데이터를 응답한다는 것을 표시
	- @RequestBody : 요청에 실려온 데이터를 바인딩해주는 어노테이션
	- @PathVariable : 요청 URI의 일부분을 변수로 활용할 수 있다(일반 컨트롤러에서도 가능)
	
# jackson-databind / jackson-dataformat-xml

	- @ResponseBody 또는 @RestController로 자바빈 객체(DTO)를 응답하면
	JSON 형식 또는 XML 형식 문자열로 변환하여 응답해주는 라이브러리
	
	- 어떤 언어에서도 JSON 형식과 XML 형식은 해석하여 값으로 사용할 수 있기 때문에 범용성이 높은 형식
	

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.15.3</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
			<version>2.15.3</version>
		</dependency>
		
# ResponseEntity 응답하기

	- 컨트롤러 메서드의 리턴 타입을 ResponseEntity 로 설정하면
	개발자가 직접 생성한 응답 객체를 리턴할 수 있다
	- 개발자가 원하는 HTTP 상태 코드(status), 컨텐츠 타입(content-type), 
	내용(body)들을 설정하여 만들어낸 응답객체를 응답할 수 있음
	