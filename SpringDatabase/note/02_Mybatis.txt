02_Mybatis.txt

# Mybatis

	- 개발자가 쿼리문만 적으면 알아서 DB에서 데이터를 꺼내오는 프레임워크
	- 거의 모든 JDBC 관련 코드를 자동으로 생성해준다
	- 개발자는 사용할 쿼리문의 종류와 쿼리문의 내용만 작성하면 됨

# 필요한 의존성

	- mybatis
	- mybatis-spring
	- spring-jdbc
	
# 적용 순서

	1. 원하는 DBCP로 DataSource를 생성한다 (ex: HikariDataSource)
	
	2. 생성한 DataSource 객체를 전달해 SqlSessionFactoryBean 객체를 생성
	
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="hikariDataSource"></property>
		</bean>
	
	3. <mybatis-spring:scan> 기능으로 Mapper 들이 위치할 패키지를 지정
		(mybatis-spring 의 버전 2.0.7)

		매퍼가 위치한 패키지를 지정함 
		ctrl + space 하면 편하게 태그 불러올 수 있음 안외워도 됨
		<mybatis-spring:scan base-package=""/> 이렇게 태그가 나오면 패키지 이름만 입력해주면 됨
		<mybatis-spring:scan base-package="com.ezen.springdb.mapper"/>
		
	버전이 높은게 중요한게 아님 획기적인 기능이 추가되는게 아닌 한 잘 돌아가는거 굳이 버전을 올리지 않음
	새로 배워야 하는것도 있지만 다른 것들도 전부 다같이 버전을 올려야 오류가 생기지 않기 때문
	
# Mybatis Mapper 

	- Mybatis는 Mapper 인터페이스만 보고도 자동으로 jdbc 관련 코드를 모두 생성해준다
	- 리턴타입, 쿼리문의 내용, 쿼리문의 종류에 영향을 받는다
	- 어노테이션 방식의 Mapper와 XML방식의 Mapper가 있다
	
# 어노테이션 방식의 Mapper

	@Select(query)
	@Insert(query)
	@Delete(query)
	@Update(query)
		
		- @Select로 조회하는 데이터가 여러 행인 경우 List<dto>타입으로 결과를 얻어온다
		- @Select로 조회하는 데이터가 한 행인 경우 dto 타입으로 결과를 얻어온다
		- 쿼리문에 파라미터가 필요한 경우 #{name}으로 사용하고 @Param{"name"}으로 지정한다
		- 매개변수 dto로 넘기는 경우 파라미터의 이름을 속성 이름과 동일하게 사용하면 별다른 mapping 없이 알아서 진행된다
		- 자세한 내용은 mybatis 홈페이지를 참고
		
# XML 방식 Mapper

	1. Mapper 인터페이스를 생성한다 (메서드만 정의하고 어노테이션은 추가하지 않음)
	2. resources 이하에 해당 Mapper 인터페이스가 속한 경로와 동일하게 폴더를 생성 (다르면 추가 설정이 필요함)
	3. 해당 폴더에 Mapper 인터페이스와 동일한 이름의 Mapper.xml 을 생성
	4. 해당 XML 파일의 형식은 mybatis 공식 홈페이지 문서에 써있음 
	(https://mybatis.org/mybatis-3/getting-started.html)