01_DB 커넥션풀.txt

# DBCP (Datebase Connection Pool)

	- DB로 작업을 수행할 때마다 새로운 DB연결을 생성하는 것은 낭비이므로 연결들을 미리 생성해놓고 가져다 쓰는 객체
	- 커넥션 풀을 사용하면 DB와의 연결을 생성하고 닫는 과정이 프로그램을 처음 킬 때만 발생하기 때문에 성능이 향상됨
	- 한가할 때는 일정량의 연결을 유지하다가 접속이 몰릴 때 새로운 연결을 더 늘려서 사용하고
	 나중에 다시 한가해지면 연결을 최소한으로 유지하는 등의 설정이 가능하다
	 

# 유명한 Java DBCP 라이브러리의 종류

	- Apache Commons DBCP
	- Tomcat-JDBC
	- HikariCP
	- ...
	
# HikariConfig/HikariDatasource 객체 자바로 사용해보기

		HikariConfig config = new HikariConfig();
		config.setJdbcUrl("jdbc:oracle:thin:@localhost:1521:XE");
		config.setUsername("hr");
		config.setPassword("1234");
		config.addDataSourceProperty("driverClassName", "oracle.jdbc.driver.OracleDriver");
		config.addDataSourceProperty("cachePrepStmts", "true");
		config.addDataSourceProperty("prepStmtCacheSize", "250");
		config.addDataSourceProperty("prepStmtCacheSqlLimit", "2048");

		// 설정 객체를 전달하여 커넥션 풀 객체를 생성
		HikariDataSource ds = new HikariDataSource(config);
		
		이후 Connection conn = ds.getConnection();
		이런식으로 사용하면됨
		
# 같은 내용을 스프링 빈으로 등록 (둘 중에 하나만 하면 됨 빈에 등록하는게 더 나은거 같기도?)

	<!-- 프로젝트에 포함한 라이브러리의 클래스로 빈을 만들어 활용할 수 있다 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:XE"></property>
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="username" value="hr"></property>
		<property name="password" value="1234"></property>
		<!-- 세터에서 대문자로 썼다고 대문자인게 아님 첫글자 소문자로 사용 -->
	</bean>
	
	<bean id="hikariDataSource" class="com.zaxxer.hikari.HikariDataSource">
		<constructor-arg ref="hikariConfig"></constructor-arg>
	</bean>